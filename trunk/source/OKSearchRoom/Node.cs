///////////////////////////////////////////////////////////
//  Node.cs
//  Implementation of the Class Node
//  Generated by Enterprise Architect
//  Created on:      05-Nov-2006 12:07:41
//  Original author: Oliver Kuehne
///////////////////////////////////////////////////////////




using OKSearchRoom;
namespace OKSearchRoom {
    /// <summary>
    /// Diese Klasse kann für Probleme genutzt werden, wo es unnötig ist einen Baum aufzubauen, d.h. wo
    /// die Verkettung von Eltern- und Kind-Knoten nicht benötigt wird.
    /// <remarks>
    /// Beim Dameproblem ist es zum Beispiel egal, wie man zur Lösung gekommen ist.
    /// Während gerade der Weg zur Lösung des Schiebepuzzles gesucht ist.
    /// </remarks>
    /// </summary>
	public class Node : INode
    {
        #region Private Member
        /// <summary>
        /// Enthält das vom Knoten eingebettete Objekt
        /// </summary>
        protected object _data;
        /// <summary>
        /// Enthält die Suchtiefe innerhalb des Baumes vom Knoten
        /// </summary>
        protected int _depth;
        #endregion

        #region Constructor
        /// <summary>
        /// Der Konstruktor.
        /// </summary>
		public Node()
		{
            _depth = 0;
        }
        
        /// <summary>
        /// Der Konstruktor bei dem das übergebene Objekt in den zu erzeugenen Knoten
        /// eingebettet wird.
        /// </summary>
        /// <param name="data">Das einzubettende Objekt</param>
        public Node(object data)
        {
            _depth = 0;
            _data = data;
        }

        /// <summary>
		/// Der Konstruktor bei dem der erzeugte Knoten gleich zu einem Unterknoten des
		/// übergebenen Elternknotens wird. Das übergebene Objekt wird eingebettet.
		/// </summary>
		/// <param name="parent">Der Elternknoten</param>
		/// <param name="data">Das einzubettende Objekt.</param>
        public Node(INode parent, object data)
        {
            _depth = parent.Depth+1;
            _data = data;
        }
        #endregion

        #region Public Member
        /// <summary>
		/// Liefert oder setzt das vom Knoten eingebettete Objekt.
		/// </summary>
		public object Data
        {
            get
            {
                return _data;
            }
            set
            {
                _data = value;
            }
		}

		/// <summary>
		/// Gibt die Suchtiefe des Knotens zurück.
		/// </summary>
		public int Depth
        {
            get
            {
                return _depth;
            }
        }
        #endregion

        #region Public Functions
        /// <summary>
        /// Renitialisiert den Knoten
        /// </summary>
        public virtual void Clear()
        {
            _depth = 0;
        }
        #endregion

    }//end Node

}//end namespace OKSearchRoom