///////////////////////////////////////////////////////////
//  BreadthFirstSearch.cs
//  Implementation of the Class BreadthFirstSearch
//  Generated by Enterprise Architect
//  Created on:      31-Jul-2006 22:22:18
//  Original author: Oliver Kuehne
///////////////////////////////////////////////////////////




using OKSearchRoom;
using System.Collections.Generic;
using System;
namespace OKSearchRoom {
	/// <summary>
	/// Mit dieser Klasse ist es möglich, auf einem Suchbaum eine Breitensuche
	/// durchzuführen. 
    /// <remarks>
    /// Diese Suche kann unendlich lange dauern, wenn die Suchtbreite(Anzahl
	/// Nachfolger eines Knotens) unendlich ist. Diese Suche findet als
	/// Zielknoten immer den "optimalen", d.h. den Knoten, der den kürzesten Abstand
	/// vom Startknoten zum Zielknoten besitzt. Alle aktuell zu untersuchenden Knoten
	/// werden als Knotenmenge gehalten.
    /// </remarks>
	/// </summary>
	public class BreadthFirstSearch : SearchMethod
    {
        #region Private Member
        /// <summary>
        /// Enthält die Knotenmenge in Form einer Queue, die für FirstIn FirstOut am besten geeignet ist.
        /// </summary>
        Queue<INode> _nodes;
        #endregion

        #region Constructor
        /// <summary>
        /// Der Konstruktor.
        /// </summary>
        /// <param name="searchProblem"></param>								 
        public BreadthFirstSearch(ISearchProblem searchProblem)
            : base(searchProblem)
        {
            _nodes = new Queue<INode>();
        }
        #endregion

        #region Protected Functions
        /// <summary>
        /// Auswahl des nächsten zu untersuchenden Knotens.
        /// </summary>
        /// <returns></returns>
        protected bool ChooseNode()
        {
            if (_nodes.Count > 0)
            {
                _currentNode = _nodes.Dequeue();
                _inspectedNodes++;
                return true;
            }
            return false;
        }

		/// <summary>
		/// Initialisiert das Suchverfahren.
		/// </summary>
		protected override void Init()
		{
            _cancel = false;
            _inspectedNodes = 0;
            _nodes.Clear();
            INode[] nodes = _searchProblem.FirstNodes;
            foreach (INode node in nodes)
            {
                node.Clear();
                _nodes.Enqueue(node);
            }
            if (_nodes.Count == 0)
                throw new Exception("There are no first nodes");
		}

        /// <summary>
        /// Der Suchalgorithmus wird gestartet. Er kann nur beendet werden, indem
        /// innerhalb der Methode des Eventhandlers Cancel auf true gesetzt wird.
        /// Sonst endet die Suche mit dem Finden des Zielknotens, oder nach erfolglosem
        /// Absuchen des gesamten Suchraums.
        /// </summary>
        protected override void Search()
        {
            INode[] generatedNodes;

            while (ChooseNode())
            {
                if (_searchProblem.CompareNodes(_currentNode))
                {
                    if (_searchProblem.OnFoundDestination(_currentNode, this))
                        return;
                    else
                        continue;
                }

                generatedNodes = _searchProblem.GenerateChildren(_currentNode, 0);

                foreach (INode node in generatedNodes)
                {
                    _nodes.Enqueue(node);
                }

                EmitSearchEvent(_nodes.Count);

                if (_cancel)
                {
                    _searchProblem.OnFoundNoneDestination();
                    return;
                }
            }

            _searchProblem.OnFoundNoneDestination();
        }
        #endregion
    }//end BreadthFirstSearch

}//end namespace OKSearchRoom